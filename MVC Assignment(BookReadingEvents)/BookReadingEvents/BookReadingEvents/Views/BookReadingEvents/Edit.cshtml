@using Services.Models;
@model Services.Models.BookReadingEvent

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>

@{ 
    List<string> HourList = new List<string>();
    for (var i = 0; i < 24; i++)
    { HourList.Add(i.ToString()); }
    List<string> MinuteList = new List<string>();
    for (var i = 0; i < 24; i++)
    { MinuteList.Add(i.ToString()); }
}
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>BookReadingEvent</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.EventID)

    <div class="form-group">
        @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control", @Value = Model.Title } })
            @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control", @type = "date", @Value = Model.Date.ToString("yyyy-MM-dd") } })
            @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Location, new { htmlAttributes = new { @class = "form-control", @Value = Model.Location } })
            @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group form-inline">
        @Html.LabelFor(model => model.StartTime, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
         @Html.DropDownList("Hours", new SelectList(HourList,Model.StartTime.Hours.ToString()),new { @class = "form-control"}) :
            @Html.DropDownList("Minutes", new SelectList(MinuteList, Model.StartTime.Minutes.ToString()), new { @class = "form-control"}) (hh:mm)
            @Html.ValidationMessage("Hours", "", new { @class = "text-danger" })
            @Html.ValidationMessage("Minutes", "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.Type, new SelectList(Enum.GetValues(typeof(EventType))), new { @class = "form-control", @Value = Model.Type })
            @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Duration, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Duration, new { htmlAttributes = new { @class = "form-control", @min = 0, @max = 4, @Value = Model.Duration } })
            @Html.ValidationMessageFor(model => model.Duration, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", @Value = Model.Description } })
            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.OtherDetails, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.OtherDetails, new { htmlAttributes = new { @class = "form-control", @Value = Model.OtherDetails } })
            @Html.ValidationMessageFor(model => model.OtherDetails, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.InvitedUsers, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.InvitedUsers, new { htmlAttributes = new { @class = "form-control", @Value = Model.InvitedUsers } })
            @Html.ValidationMessageFor(model => model.InvitedUsers, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
            @* <button value="Save" class="btn btn-default" >Cancel</button>*@
            <input type="button" value="Cancel" class="btn btn-default" onclick="location.href='@Url.Action( "Details","BookReadingEvents", new {  id = Model.EventID })';return false;" />
        </div>
        <label id="print"></label>
    </div>
</div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

}
